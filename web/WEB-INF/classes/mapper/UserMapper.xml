<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，后面会讲 -->
<mapper namespace="com.jiechen.pojo.UesrMapper">

    <select id="queryUserById" parameterType="int" resultType="com.jiechen.pojo.User">
        SELECT * FROM user WHERE id = #{id}
    </select>

    <!-- 如果返回多个结果，mybatis会自动把返回的结果放在list容器中 -->
    <!-- resultType的配置和返回一个结果的配置一样 -->
    <select id="queryUserByUsername" parameterType="string" resultType="com.jiechen.pojo.User">
        SELECT * FROM `user` WHERE username LIKE #{username}
    </select>

    <!-- 如果传入的参数是简单数据类型，${}里面必须写value -->
    <select id="queryUserByUsername2" parameterType="string" resultType="com.jiechen.pojo.User">
        SELECT * FROM `user` WHERE username LIKE '%${value}%'
    </select>

    <!-- 保存用户 -->
    <insert id="saveUser" parameterType="com.jiechen.pojo.User">
        INSERT INTO `user`
        (username,password) VALUES
        (#{username},#{password})
    </insert>

    <!-- 保存用户 -->
    <insert id="saveUser2" parameterType="com.jiechen.pojo.User">
        <!-- selectKey 标签实现主键返回 -->
        <!-- keyColumn:主键对应的表中的哪一列 -->
        <!-- keyProperty：主键对应的pojo中的哪一个属性 -->
        <!-- order：设置在执行insert语句前执行查询id的sql，孩纸在执行insert语句之后执行查询id的sql -->
        <!-- resultType：设置返回的id的类型 -->
        <selectKey keyColumn="id" keyProperty="id" order="AFTER"
                   resultType="int">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO `user`
        (username,password) VALUES
        (#{username},#{password})
    </insert>


    <!-- 更新用户 -->
    <update id="updateUserById" parameterType="com.jiechen.pojo.User">
        UPDATE `user` SET
        username = #{username} WHERE id = #{id}
    </update>

    <!-- 删除用户 -->
    <delete id="deleteUserById" parameterType="int">
        delete from user where
        id=#{id}
    </delete>


</mapper>
